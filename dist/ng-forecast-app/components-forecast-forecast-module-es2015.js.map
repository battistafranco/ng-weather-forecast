{"version":3,"sources":["webpack:///./src/app/components/forecast/forecast.component.html","webpack:///./src/app/components/forecast/forecast.component.scss","webpack:///./src/app/components/forecast/forecast.component.ts","webpack:///./src/app/components/forecast/forecast.module.ts","webpack:///./src/app/components/forecast/services/forecast.service.ts"],"names":[],"mappings":"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","file":"components-forecast-forecast-module-es2015.js","sourcesContent":["module.exports = \"<div class=\\\"control-panel\\\">\\n    <div class=\\\"button-panel\\\">\\n        <form [formGroup]=\\\"form\\\">\\n            <mat-form-field>\\n                <input id=\\\"selectedFilterValue\\\" formControlName=\\\"selectedFilterValue\\\" matInput type=\\\"text\\\"\\n                    placeholder=\\\"Select your city\\\" />\\n            </mat-form-field>\\n            <button mat-raised-button color=\\\"primary\\\" type=\\\"button\\\" (click)=\\\"search()\\\"\\n                matTooltip=\\\"Refresh the forecasts\\\">Search</button>\\n        </form>\\n    </div>\\n</div>\\n<div class=\\\"content-container\\\">\\n    <div class=\\\"list-container\\\">\\n        <div *ngIf=\\\"forecast$ | async as forecast\\\">\\n            <mat-spinner *ngIf=\\\"loading$ | async;else forecastList\\\" mode=\\\"indeterminate\\\" color=\\\"accent\\\"></mat-spinner>\\n            <ng-template #forecastList>\\n                <!-- <app-hero-list [forecasts]=\\\"forecasts\\\" [selectedForecast]=\\\"selected\\\" \\n                    (selected)=\\\"select($event)\\\"></app-hero-list> -->\\n                <mat-card>\\n                    <mat-card-header>\\n                        <mat-card-title>Resultados: {{forecast.count}}</mat-card-title>\\n                    </mat-card-header>\\n                    <mat-card-content>\\n                        <ul class=\\\"forecasts\\\">\\n                            <div *ngFor=\\\"let city of forecast.list\\\" style=\\\"display: inline\\\" class=\\\"item-container\\\">\\n                                <mat-card>\\n                                    <mat-card-header>\\n                                        <mat-card-title>{{city.name }} ({{city.sys.country}})</mat-card-title>\\n                                    </mat-card-header>\\n                                    <mat-card-content>\\n                                        Temp: {{city.main.temp}} |\\n                                        Min: {{city.main.temp_min}} |\\n                                        Max: {{city.main.temp_max}}\\n                                    </mat-card-content>\\n                                    <mat-card-actions>\\n                                        <button mat-button mat-suffix color=\\\"default\\\" class=\\\"details-button\\\"\\n                                            aria-label=\\\"Fav\\\" (click)=\\\"details(city.id)\\\" matTooltip=\\\"Details\\\">\\n                                            View Details\\n                                        </button>\\n                                        <button mat-button mat-suffix color=\\\"primary\\\" class=\\\"addFav-button\\\"\\n                                            aria-label=\\\"Fav\\\" (click)=\\\"addFav(city)\\\" matTooltip=\\\"Add Fav\\\">\\n                                            Add to Favs\\n                                        </button>\\n                                    </mat-card-actions>\\n                                </mat-card>\\n\\n                                <!-- <div class=\\\"selectable-item\\\" [class.selected]=\\\"city === selectedForecast\\\"\\n                                    (click)=\\\"select(city)\\\">\\n                                    <div class=\\\"badge\\\"> {{city.id}}</div>\\n                                    <div class=\\\"item-text\\\">\\n                                        <div class=\\\"name\\\">{{city.name }}</div>\\n                                        <div class=\\\"saying\\\">{{city.sys.country}}</div>\\n                                    </div>\\n                                   \\n                                </div> -->\\n                            </div>\\n                        </ul>\\n                    </mat-card-content>\\n                </mat-card>\\n\\n            </ng-template>\\n        </div>\\n    </div>\\n    <div class=\\\"detail-container\\\">\\n        <!-- <app-hero-detail *ngIf=\\\"selected\\\" [forecast]=\\\"selected\\\" (unselect)=\\\"close()\\\" (add)=\\\"add($event)\\\"\\n            (update)=\\\"update($event)\\\">\\n        </app-hero-detail> -->\\n    </div>\\n</div>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZm9yZWNhc3QvZm9yZWNhc3QuY29tcG9uZW50LnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { finalize } from 'rxjs/operators';\nimport { Forecast } from '../../models/forecast';\nimport { ForecastService } from './services/forecast.service';\nimport { Observable } from 'rxjs';\nimport { FormGroup, FormControl } from '@angular/forms';\nimport { FavService } from 'src/app/components/fav/services/fav.service';\n\n@Component({\n  selector: 'app-forecast',\n  templateUrl: './forecast.component.html',\n  styleUrls: ['./forecast.component.scss']\n})\nexport class ForecastComponent implements OnInit {\n  selected: Forecast;\n  forecast$: Observable<Forecast>;\n  loading$: Observable<boolean>;\n\n\n  form: FormGroup = new FormGroup({\n    selectedFilterValue: new FormControl(\"\")\n  });\n\n\n  constructor(private forecastService: ForecastService, private fabService: FavService) {\n\n  }\n\n  ngOnInit() {\n\n  }\n\n\n  search() {\n    this.searchForecastByCity(this.form.value.selectedFilterValue);\n  }\n\n  searchForecastByCity(city) {\n    this.forecast$ = this.forecastService.searchForecastByCity(city);\n    this.close();\n  }\n\n  addFav(city)\n  {\n    debugger;\n    this.fabService.add({ id: city.id, city: city.name, description: city.sys.country })\n  }\n\n  close() {\n    this.selected = null;\n  }\n\n  select(forecast: Forecast) {\n    this.selected = forecast;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ForecastService } from './services/forecast.service';\nimport { ForecastComponent } from './forecast.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MaterialModule } from 'src/app/material/material.module';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\nconst routes: Routes = [\n  { path: '', pathMatch: 'full', component: ForecastComponent }\n];\n\n@NgModule({\n  declarations: [ForecastComponent],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    SharedModule,\n    MaterialModule,\n    RouterModule.forChild(routes)\n  ], providers: [ForecastService], exports: [ForecastComponent]\n})\nexport class ForecastModule { }\n","\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Forecast } from '../../../models/forecast'\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class ForecastService {\n  private API_PATH = 'http://api.openweathermap.org/data/2.5';\n  private APPID = '8b6724eb05f6d7ca7b6fba345dac3465';\n  constructor(private http: HttpClient) { }\n\n  searchForecastByCity(city: string) {\n    return this.http.get(`${this.API_PATH}/find?q=${city}&appid=${this.APPID}`)\n      .pipe(map(forecast => {\n        return forecast as Forecast;\n      }));\n  }\n\n  getForecastByCityID(id: number): Observable<Forecast> {\n    return this.http.get(`${this.API_PATH}/weather?id=${id}`)\n      .pipe(map(res => res as Forecast));\n  }\n}\n"],"sourceRoot":""}